// Define the Gradle plugins used by this project
plugins {
	// Fabric Loom plugin for Minecraft mod development with Fabric
	id 'fabric-loom' version "${loom_version}"

	// Maven Publish plugin to enable publishing artifacts to Maven repositories
	id 'maven-publish'
}

// Set the project version and group for publishing and artifact naming
version = project.mod_version
group = project.maven_group

// Configure the base archive name (jar name) for built artifacts
base {
	archivesName = project.archives_base_name
}

// Define repositories to fetch dependencies from
repositories {
	// Custom Maven repo for TerraformersMC artifacts (e.g., modmenu)
	maven {
		name = "Terraformers"
		url = "https://maven.terraformersmc.com/"
	}

	// Fzzy Maven repo, for fzzy_config and related libraries (version 0.4.3+ recommended)
	maven {
		name = "FzzyMaven"
		url = "https://maven.fzzyhmstrs.me/"
	}

	// Modrinth Maven repository for various mod dependencies
	maven { url = "https://api.modrinth.com/maven" }
}

// Fabric Loom specific configuration block
loom {
	// Enables splitting source sets per environment (client/server)
	splitEnvironmentSourceSets()

	// Define the mod source sets â€” used for including client and common code
	mods {
		"contentcraft" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

	// Configuration for run tasks (launching Minecraft client for testing)
	runs {
		client {
			client() // Use Minecraft client launch configuration
			setConfigName("Fabric Client") // Name for this run configuration
			ideConfigGenerated(true) // Generate IDE run configs automatically
			runDir("run") // Working directory for the Minecraft client instance

			// If the project defines Minecraft user UUID, pass it as a program argument
			if (project.hasProperty('mc_uuid')) {
				programArg("--uuid=${project.findProperty('mc_uuid')}")
			}

			// If the project defines Minecraft username, pass it as a program argument
			if (project.hasProperty('mc_username')) {
				programArg("--username=${project.findProperty('mc_username')}")
			}
		}
	}
}

// Configuration block for Fabric API data generation
fabricApi {
	configureDataGeneration {
		client = true // Enable client-side data generation (e.g., models, lang files)
	}
}

// Define the project's dependencies
dependencies {
	// Minecraft version - from gradle.properties for flexibility
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	// Yarn mappings version (v2) for obfuscated Minecraft names
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	// Fabric Loader version
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API - recommended for mod development (provides common APIs)
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Google Gson library for JSON parsing
	implementation 'com.google.code.gson:gson:2.8.9'

	// ModMenu mod - included in the mod jar, version controlled in gradle.properties
	include(modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}"))

	// FzzyConfig library - included for config management, note underscore in artifact name
	include(modImplementation("me.fzzyhmstrs:fzzy_config:${project.fzzyconfig_version}"))

}

// Process resources task customization
processResources {
	// Make the mod version available as a property during resource processing
	inputs.property "version", project.version

	// Replace ${version} placeholder in fabric.mod.json with the actual mod version
	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}

	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure Java compilation tasks to use Java 21
tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

// Java toolchain and jar settings
java {
	// Generate sources jar automatically and attach to build artifacts
	withSourcesJar()

	// Set Java source and target compatibility to Java 21
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

// Jar task customization for including license with renamed file
jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		// Rename LICENSE file inside jar to include archive base name (e.g., LICENSE_contentcraft)
		rename { "${it}_${inputs.properties.archivesName}" }
	}
}

// Configure Maven publishing for this project
publishing {
	publications {
		// Define a Maven publication named 'mavenJava' for publishing mod jar
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name // Set artifact ID for Maven
			from components.java // Publish the Java component (compiled jar)
		}
	}

	// Maven repositories to publish artifacts to (empty here, add your repos)
	repositories {
		// Add publishing repository URLs and credentials here if needed
	}
}

// Define source sets for the project, separating main and client sources
sourceSets {
	main {
		java {
			srcDirs = ["src/main/java"] // Main mod code source directory
		}
	}
	client {
		java {
			srcDirs = ["src/client/java"] // Client-only code source directory
		}
		// Include main source set dependencies so client can use common code
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}