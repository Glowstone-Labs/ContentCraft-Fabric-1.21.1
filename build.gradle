plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

loom {
	runs {
		client {
			vmArgs "-Dfabric.dli.config=true"
		}
	}
}

repositories {
// Custom Maven repo for TerraformersMC artifacts (e.g., modmenu)
	maven {
		name = "Terraformers"
		url = "https://maven.terraformersmc.com/"
	}

	// Fzzy Maven repo, for fzzy_config and related libraries (version 0.4.3+ recommended)
	maven {
		name = "FzzyMaven"
		url = "https://maven.fzzyhmstrs.me/"
	}

	maven { url 'https://maven.blamejared.com' }

	// Modrinth Maven repository for various mod dependencies
	maven { url = "https://api.modrinth.com/maven" }
}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

dependencies {
// Minecraft version - from gradle.properties for flexibility
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	// Yarn mappings version (v2) for obfuscated Minecraft names
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

	// Fabric Loader version
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API - recommended for mod development (provides common APIs)
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Google Gson library for JSON parsing
	implementation 'com.google.code.gson:gson:2.8.9'

	// ModMenu mod - included in the mod jar, version controlled in gradle.properties
	include(modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}"))

	// FzzyConfig library - included for config management, note underscore in artifact name
	include(modImplementation("me.fzzyhmstrs:fzzy_config:${project.fzzy_config_version}"))

	include(modImplementation("vazkii.patchouli:Patchouli:${project.patchouli_version}"))

	include("net.fabricmc.fabric:fabric-registry-sync-v0:${project.fabric_version}")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}

	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.withType(AbstractCopyTask).configureEach {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}